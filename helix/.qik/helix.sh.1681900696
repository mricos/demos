helix-help(){
cat <<EOF
  Helix explores the grammar of helixical structures
  over minimal error surfaces. Requires Node.JS env.

helix/
│
├── node_modules/
│
├── components/
│   ├── helix-pill.css
│   └──
│
├── public/
│   ├── index.html
│   └── styles.css (generated after running 'npm run build')
│
├── src/
│   └── styles.css
│
├── postcss.config.js
├── tailwind.config.js
└── package.json

Static: public/index.html
To build: npm run build
To serve: serve public
EOF
}

helix-install(){
  npm init -y
  npm install browser-sync --save-dev
  npm install postcss-import --save-dev
  [ -d ./package.json ] && npm init -y
  npm install tailwindcss postcss autoprefixer
  npm install --save-dev postcss-cli
}

helix-build(){
  npm run build
}

helix-serve(){
  npm start
}
helix-nuke(){
  read -p "Deleting src, public, <ret> to continue, ctrl-c to quit."
  rm -rf ./src
  rm -rf ./public
  rm -rf ./components
  rm ./build.sh
  rm ./tailwind.config.js
  rm ./postcss.config.js
}

helix-create(){
  [ -d ./src ] && echo "src exists, <ret> to continue, ctrl-c quits" && read
  mkdir ./src
  mkdir ./public
  mkdir ./src/components
  _helix-generate-tailwind.confg.js
  _helix-generate-postcss-config.js
  _helix-generate-styles.css
  _helix-generate-index.html
  _helix-generate-build.sh

  echo "Making default components" 
  _helix-generate-pill-css > ./src/helix-pill.css

cat <<EOF

Add build cmd to  package.json:
  "scripts": {
    "build": "./build.sh"
   }

EOF
}

_helix-generate-build.sh(){
  cat <<EOF > ./build.sh
#!/bin/bash
cp src/index.html public/index.html  # This is where to add build time info
postcss src/styles.css -o public/styles.css
EOF
  chmod +x ./build.sh
}

_helix-generate-tailwind.confg.js(){
  cat <<EOF > ./tailwind.config.js
module.exports = {
  content: ["./src/**/*.{html,js}"],
  theme: {
    extend: {
      fontFamily: {
        'body': ['Roboto', 'sans-serif']
      }
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
EOF
}

_helix-generate-styles.css(){
  cat <<EOF > ./src/styles.css
@import './helix-pill.css';
@tailwind base;
@tailwind components;
@tailwind utilities;


@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

EOF
}


_helix-generate-postcss-config.js(){
  cat<<EOF > ./postcss.config.js
module.exports = {
  plugins: [
    require('postcss-import'),
    require('tailwindcss'),
    require('autoprefixer'),
  ]
}
EOF

}
_helix-generate-index.html(){

  cat <<'EOF' > ./src/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HeLIx</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="./styles.css">
</head>
<body class="bg-gray-900 text-red-300 font-body min-h-screen flex flex-col">
    <header class="bg-gray-800 p-4">
        <!-- Header content -->
    </header>

    <main class="flex-1 flex items-center justify-center">
<!--
	<h1 id="helix-pill" class="helix-pill text-4xl py-2 px-4 bg-gray-900 border-2 border-red-400 rounded-full mt-1/3 cursor-pointer">Helix</h1>
-->

  <div id="helix-pill" class="helix-pill" data-border="0">
    <div class="helix-pill" data-border="1">
    <div class="helix-pill" data-border="2">
    <div class="helix-pill" data-border="3">
    <div class="helix-pill" data-border="4">
    <div class="helix-pill" data-border="5">
    <div class="helix-pill" data-border="6">
    <div class="helix-pill" data-border="7">Helix

  </div> </div> </div> </div> </div> </div> </div> </div>
    </main>

    <footer class="bg-gray-800 p-4">
        <!-- Footer content -->
    </footer>

<script>
let spinning = false;
let animationFrameId;
const easingFactor = 0.95;

function init() {
  const pill = document.getElementById('helix-pill');
  let spinning = false;
  let rotation = 0;

  function spin() {
    if (spinning) {
      rotation += 360 / (2 * 60); // Rotate at 1 revolution per 2 seconds
      pill.style.transform = `rotate(${rotation}deg)`;
      requestAnimationFrame(spin);
    }
  }

  pill.addEventListener('click', () => {
    spinning = !spinning;

    if (spinning) {
      spin();
    } else {
      const currentRotation = parseFloat(pill.style.transform.match(/rotate\((\d+(\.\d+)?)deg\)/)[1]);
      const easedRotation = Math.ceil(currentRotation / 90) * 90;
      pill.style.transition = 'transform 1s ease-out';
      pill.style.transform = `rotate(${easedRotation}deg)`;
      setTimeout(() => {
        pill.style.transition = '';
      }, 1000);
      rotation = easedRotation;
    }
  });
}

document.addEventListener('DOMContentLoaded', init);


document.addEventListener('DOMContentLoaded', init);


</script>
</body>
</html>
EOF

}
_helix-generate-pill-css() {

cat <<EOF
.helix-pill {
  @apply relative inline-block py-2 px-4 text-4xl cursor-pointer;
  @apply bg-gray-900 rounded-full;
  transition: transform 1s ease-out;

}

.helix-pill::before,
.helix-pill::after {
  content: "";
  position: absolute;
  top: -1px;
  right: -1px;
  bottom: -1px;
  left: -1px;
  border-radius: inherit;
  z-index: -1;
}

.helix-pill::before {
  @apply border-2;
  border-color: rgba(239, 68, 68, 0.3); /* Change the hue and opacity as desired */
}

.helix-pill::after {
  @apply border-2;
  border-color: rgba(220, 38, 38, 0.4); /* Change the hue and opacity as desired */
  top: -3px;
  right: -3px;
  bottom: -3px;
  left: -3px;
}

/* Add more pseudo-elements for the remaining concentric borders */

EOF
  echo ".helix-pill {"
  echo "  @apply relative inline-block py-2 px-4 text-4xl cursor-pointer;"
  echo "  @apply bg-gray-900 rounded-full;"
  echo "}"
  
  for i in {0..7}; do
    hue=$((i * 45)) # Adjust the step size between hues as desired
    opacity=$((30 + i * 10))
    
    echo ".helix-pill[data-border=\"$i\"]::before,"
    echo ".helix-pill[data-border=\"$i\"]::after {"
    echo "  content: \"\";"
    echo "  position: absolute;"
    echo "  top: -$((i + 1))px;"
    echo "  right: -$((i + 1))px;"
    echo "  bottom: -$((i + 1))px;"
    echo "  left: -$((i + 1))px;"
    echo "  border-radius: inherit;"
    echo "  z-index: -1;"
    echo "}"
    
    echo ".helix-pill[data-border=\"$i\"]::before {"
    echo "  @apply border-2;"
    echo "  border-color: hsla($hue, 100%, 50%, 0.$opacity);"
    echo "}"
    
    echo ".helix-pill[data-border=\"$i\"]::after {"
    echo "  @apply border-2;"
    echo "  border-color: hsla($((hue + 20)), 100%, 50%, 0.$((opacity + 10)));"
    echo "  top: -$((i + 2))px;"
    echo "  right: -$((i + 2))px;"
    echo "  bottom: -$((i + 2))px;"
    echo "  left: -$((i + 2))px;"
    echo "}"
  done
}
