<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Iris Reversible Model – Live Confusion</title>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.13.0"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-lite@5"></script>
  <script src="https://cdn.jsdelivr.net/npm/vega-embed@6"></script>
  <style>
    body {
      font-family: sans-serif;
      background: #111;
      color: #eee;
      margin: 0;
      padding: 1rem;
      display: flex;
      flex-direction: column;
    }
    .container {
      display: flex;
      gap: 1rem;
    }
    canvas {
      background: #000;
      border: 1px solid #333;
    }
    .log {
      font-family: monospace;
      white-space: pre-wrap;
      background: #222;
      padding: 1rem;
      max-height: 200px;
      overflow-y: scroll;
      margin-top: 1rem;
    }
    #confusion {
      background: #222;
      padding: 0.5rem;
    }
  </style>
</head>
<body>
  <h1>Iris Model with Garbage Bits (Live Confusion)</h1>
  <div class="container">
    <canvas id="chart" width="600" height="300"></canvas>
    <div id="confusion"></div>
  </div>
  <div class="log" id="log">Initializing...\n</div>

  <script type="module">
    const logEl = document.getElementById('log');
    const chart = document.getElementById('chart');
    const ctx = chart.getContext('2d');
    const confusionDiv = document.getElementById('confusion');

    const log = (msg) => {
      logEl.textContent += msg + '\n';
      logEl.scrollTop = logEl.scrollHeight;
    };

    const drawChart = (losses, accs) => {
      ctx.clearRect(0, 0, chart.width, chart.height);
      ctx.fillStyle = '#000'; ctx.fillRect(0, 0, chart.width, chart.height);
      ctx.strokeStyle = '#666';
      ctx.beginPath(); ctx.moveTo(40, 0); ctx.lineTo(40, 300); ctx.moveTo(40, 290); ctx.lineTo(600, 290); ctx.stroke();

      ctx.fillStyle = 'white';
      ctx.fillText("Loss / Accuracy", 10, 10);
      ctx.fillText("Epochs →", 520, 280);

      ctx.strokeStyle = 'lime'; ctx.beginPath();
      losses.forEach((l, i) => {
        const x = 40 + i * (560 / losses.length);
        const y = 290 - l * 100;
        i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
      }); ctx.stroke();

      ctx.strokeStyle = 'orange'; ctx.beginPath();
      accs.forEach((a, i) => {
        const x = 40 + i * (560 / accs.length);
        const y = 290 - a * 100;
        i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
      }); ctx.stroke();

      ctx.fillText("Green: loss", 460, 20);
      ctx.fillText("Orange: acc", 460, 40);
    };

    const renderConfusionMatrix = async (trueLabels, predLabels) => {
      const cm = await tf.math.confusionMatrix(trueLabels, predLabels, 3).array();
      const total = cm.flat().reduce((a, b) => a + b, 0);
      const classLabels = ['setosa', 'versicolor', 'virginica'];
      const data = [];

      for (let i = 0; i < 3; i++) {
        const rowSum = cm[i].reduce((a, b) => a + b, 0);
        for (let j = 0; j < 3; j++) {
          const count = cm[i][j];
          const percent = rowSum > 0 ? (100 * count / rowSum).toFixed(1) + "%" : "0%";
          data.push({
            actual: classLabels[i],
            predicted: classLabels[j],
            count: count,
            text: `${count} (${percent})`
          });
        }
      }

      const spec = {
        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
        description: 'Live Confusion Matrix',
        width: 300,
        height: 300,
        data: { values: data },
        mark: 'rect',
        encoding: {
          x: { field: 'predicted', type: 'nominal', axis: { title: 'Predicted' } },
          y: { field: 'actual', type: 'nominal', axis: { title: 'Actual' } },
          color: { field: 'count', type: 'quantitative', scale: { scheme: 'blues' } }
        },
        layer: [
          {
            mark: 'rect'
          },
          {
            mark: { type: 'text', color: 'white', fontSize: 14 },
            encoding: {
              text: { field: 'text', type: 'nominal' }
            }
          }
        ]
      };

      vegaEmbed('#confusion', spec, { actions: false });
    };

    const irisData = await fetch('https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv')
      .then(res => res.text())
      .then(text => {
        const rows = text.trim().split('\n').slice(1);
        return rows.map(r => r.split(',').map((v, i) => i < 4 ? +v : v));
      });

    const classMap = { setosa: 0, versicolor: 1, virginica: 2 };
    const features = irisData.map(r => r.slice(0, 4).map(Number));
    const labels = irisData.map(r => classMap[r[4]]);

    const garbage = tf.randomNormal([features.length, 2]).arraySync();
    const inputData = tf.tensor2d(features.map((x, i) => [...x, ...garbage[i]]));
    const labelsTensor = tf.tensor1d(labels, 'int32');
    const oneHotLabels = tf.oneHot(labelsTensor, 3);

    const input = tf.input({ shape: [6] });
    const encoded = tf.layers.dense({ units: 8, activation: 'relu' }).apply(input);
    const decoded = tf.layers.dense({ units: 6, name: 'reconstruction' }).apply(encoded);
    const classified = tf.layers.dense({ units: 3, activation: 'softmax', name: 'classout' }).apply(encoded);
    const model = tf.model({ inputs: input, outputs: [classified, decoded] });

    model.compile({
      optimizer: tf.train.adam(0.01),
      loss: {
        classout: tf.losses.softmaxCrossEntropy,
        reconstruction: tf.losses.meanSquaredError
      },
      lossWeights: { classout: 1.0, reconstruction: 0.1 },
      metrics: { classout: ['accuracy'] }
    });

    const epochs = 50;
    const losses = [], accs = [];

    log('Training model...');
    await model.fit(inputData, { classout: oneHotLabels, reconstruction: inputData }, {
      epochs,
      batchSize: 32,
      callbacks: {
onEpochEnd: async (epoch, logs) => {
  const loss = logs.loss.toFixed(4);
  const acc = (logs['classout_accuracy'] ?? logs['classout_acc'] ?? 0).toFixed(4);
  log(`Epoch ${epoch + 1} - loss: ${loss}, acc: ${acc}`);
  losses.push(parseFloat(loss));
  accs.push(parseFloat(acc));
  drawChart(losses, accs);

  // Correct output handling
  const outputs = model.predict(inputData);
  const ypred = Array.isArray(outputs) ? outputs[0] : outputs;
  const predLabelsEpoch = ypred.argMax(-1);
  await renderConfusionMatrix(labelsTensor, predLabelsEpoch);
}

              }
    });

    const [_, xrecon] = model.predict(inputData);
    const reconError = tf.losses.meanSquaredError(inputData, xrecon).mean();
    const reconErrorVal = await reconError.data();
    log(`\nFinal reconstruction MSE: ${reconErrorVal[0].toFixed(6)}`);
  </script>
</body>
</html>
