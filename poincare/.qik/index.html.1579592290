<html>
<head>
<style>
html{
    margin:.5em 4em .5em 2em;
}
li{
    margin-left:4em;
    padding-left:4em;
}
.canvas-container{
    float:left;
    width:200px;
    margin-left:1em;
    margin-bottom:1em;
    margin-right:2em;
    border: 2px solid blue; 
}
.footnotes{
    font-size:x-small;
    font-style:italic;
    margin:0;
    padding:0; 
}
a{
    text-decoration:none;
}
input[type=range][orient=vertical]
{
    writing-mode: bt-lr; /* IE */
    -webkit-appearance: slider-vertical; /* WebKit */
    width: 8px;
    height: 175px;
    padding: 0 5px;
}

</style>
</head>
<h1>Poincairé Disk Model</h1>
<div class="canvas-container">
<canvas 
    id="disk_canvas" 
    width="200", 
    height="200"
>
</canvas>
</div> <!-- canvas-container -->
<div id="summary" onclick='change(event)' >
<p> In geometry, the Poincaré disk model, also called the
conformal disk model, is a model of 2-dimensional hyperbolic
geometry in which the points of the geometry are inside the
unit disk, and the straight lines consist of all circular arcs
contained within that disk that are orthogonal to the boundary
of the disk, plus all diameters of the disk.  </p>

<p> The isometry group of the disk model is given by the special
unitary group SU(1,1).  </p>

<p> Along with the Klein model and the Poincaré half-space
model, it was proposed by Eugenio Beltrami who used these
models to show that hyperbolic geometry was equiconsistent with
Euclidean geometry. It is named after Henri Poincaré, because
his rediscovery of this representation fourteen years later
became better known than the original work of Beltrami.  </p>
</div> <!-- summary -->
<div id="console">
    <form>
        <input id="input" value="rgb(200,100,0)">
        <input type="submit" id="submit-button" value="submit"></input>
        <input type="button" id="stop" value="stop">
        <input type="button" id="start" value="start">
        <span id="closeConsole" > X </span>
    </form>
</div>

<div class="controls">
    <input type="range" id="xPos"  min="0" max="200" value="50">
    <input type="range" id="xFreq"  min="0" max="20" value="1">
    <br>
    <input type="range" id="yPos"  min="0" max="200" value="50">
    <input type="range" id="yFreq"  min="0" max="20" value="1">
    <br>
    <input type="range" id="size"  min="0" max="200" value="50">
    </input>
</div> <!-- controls -->
<div id="debug">debug info</div>

<div class="footnotes">
<hr style="width:30%; text-align:left; margin-left:0"></hr>
Technical notes:
<ul style="list-style-type: none;">
<li>
<a href=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input>
Element input
</a></li>
<li>
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame">
RequestAnimationFrame
</a></li>
</ul>
</div><!-- footnotes -->

<!-- 
https://cdnjs.com/libraries/raphael
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.js">
</script>
-->

<script>
/*
  Basic idea: each element has a current state and N-1 previous
states. A step function recursively updates all N-1 previous
states each call to update() which calls draw(state) which 
maps over all entries and renders objects with a type attribute
of {square, circle, triangle}. 

update(timestamp) {
  state=filter(state,transition)
  render(state)
}

transition(state){
  state[0].opacity = state[0].opacity - .5 * state[1]
}
*/
function debug(str){
    //console.log(str);
    document.getElementById("debug").innerHTML = str;
}

function change(evt){
    debugString = `${evt.target.id}: ${evt.target.value}`;
    //console.log(evt.target.id, evt.target.value);
    debug(debugString);

    if(evt.target.id == "xPos"){
        props.xpos=evt.target.value;
    }
    if(evt.target.id == "yPos"){
        props.ypos=evt.target.value;
    }
    if(evt.target.id == "xFreq"){
        props.xFreq=20*(evt.target.value)/200; // [0-20]Hz
    }
    if(evt.target.id == "yFreq"){
        props.yFreq=20*evt.target.value/200;
    }
    if(evt.target.id == "size"){
        props.size=evt.target.value;
    }
    if(evt.target.id == "stop"){
        props.isRunning=false;
        window.cancelAnimationFrame(props.reqId);
    }
    if(evt.target.id == "start"){
        props.isRunning=true;
        props.reqId=window.requestAnimationFrame(step);
    }
    if(evt.target.id == "closeConsole"){
        document.getElementById("console").style.display="none";
    }
    if(evt.target.id == "summary"){
        document.getElementById("summary").style.display="none";
    }

    if(props.isRunning == false){
        draw(props); 
    }
}

function init() {
    for (var el of document.getElementsByTagName('input')) {
       el.addEventListener("input", change);
    }
 
    document.getElementById("closeConsole").addEventListener("click", change);
 
    document.getElementById("stop").addEventListener("click", change);
    document.getElementById("start").addEventListener("click", change);

    /* Prevent submit to send a POST request on all forms on page.*/ 
    Array.prototype.map.call(document.forms, function(form) { 
         form.addEventListener("submit",
                    function (event) {
                        event.preventDefault();
                        eval(document.getElementById("input").value);
                        //sendData();
                                     });
       return form;});

    props.reqId = window.requestAnimationFrame(step);
}

let props = {
    isRunning:false,
    reqId:0,
    fillStyle:"rgb(200,100,50)",
    xpos:50,
    ypos:50,
    xFreq: .5,
    yFreq: .5,
    size:50
}

function State(props) {
   // State is an array of arrays: current plus N-1 back in time
   // In this case three objects represented now and one step 
   // back in time
   return [[props,props, props], [props, props, props]]; 
}
var state = State(props);

var start =0;
var progress =0;
function step(timestamp){
    debugString=`${timestamp}: `;
    if(!start) start = timestamp;
    progress = timestamp - start;
    sines[0].freq=props.xFreq;
    sines[1].freq=props.yFreq;
    modulate(sines,progress);
    props.xpos=sines[0].value;
    props.ypos=sines[1].value;
    debugString += props.xpos.toFixed(2);
    //debug(debugString);
    draw(props);
    if (progress > 200 ) {
        progress=0;
    }
     props.reqId = window.requestAnimationFrame(step);
}

function draw(props){
    width=200;
    height=200;
    var canvas=document.getElementById("disk_canvas");
    var ctx = canvas.getContext('2d');
    var entireCanvas=[0, 0, canvas.width, canvas.height];
    ctx.strokeStyle = "#FF0000";
    //ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.clearRect(...entireCanvas);
    ctx.fillStyle = props.fillStyle; 
    ctx.strokeStyle = "#FF0000";
    ctx.arc(100, 100,100,0,2*Math.PI,1);
    ctx.stroke();
    ctx.fillRect(props.xpos -props.size/2,
                 props.ypos -props.size/2,
                 props.size,
                 props.size);
}

var sines = [
{
    amp:100.0,
    freq:2.0,
    value:0,
    offset:1.0,
    time:0,
    phase:0
},
{
    amp:100.0,
    freq:2.0,
    value:0,
    offset:1.0,
    time:0,
    phase:-Math.PI/2
}


];

function modulate(sines, timeMs) {
    sines.map( function(sine) {
        sine.time = timeMs;
        sine.value = sine.amp*(sine.offset +
                     Math.sin(2*Math.PI*sine.freq*sine.time/1000 
                              + sine.phase));
        });
}

window.onload = function() {
  init();
  //draw(params);
};
</script>
</html>
